#!/usr/bin/env python

"""The commit-msg hook runs when the commit message is entered.

The only argument passed to this hook is the name of the file that contains
the commit message.
"""

import sys


def main():
    if len(sys.argv) == 1:
        print 'The file containing the commit msg is not given'
        print 'You should only see this when you are testing the script\n'
        return

    print 'Doing a quick check on your commit message'

    file_contents = parse_commit_msg_file(sys.argv[1])
    if not has_valid_commit_msg(file_contents):
        print 'Your commit is not saved'
        sys.exit(1)

    # TODO: remove this before production to allow valid commits to occur
    sys.exit(1)


def parse_commit_msg_file(path):
    with open(path, 'r') as f:
        return f.read()


def has_valid_commit_msg(file_contents):
    subject, body = extract_subject_and_body(file_contents)
    return has_valid_subject(subject) and has_valid_body(body)


def extract_subject_and_body(file_contents):
    msg = remove_lines_starting_with_hashtag(file_contents)
    msg = msg.strip()
    if not msg:
        return None, None

    subject_and_body = msg.split('\n\n', 1)
    subject = subject_and_body[0]
    if len(subject_and_body) == 2:
        body = subject_and_body[1]
    else:
        body = None

    return subject, body


def remove_lines_starting_with_hashtag(file_contents):
    output = ''
    contents_list = file_contents.split('\n')
    length = len(contents_list)

    for i in xrange(length):
        if not contents_list[i].startswith('#'):
            output += contents_list[i]
            if i < (length - 1):
                output += '\n'
    return output


def has_valid_subject(subject):
    if not subject:
        print 'Type in a subject'
        return False

    if not subject[0].isupper():
        print 'Start the first letter of the subject in uppercase'
        return False

    first_word = subject.split(' ', 1)[0]

    if is_likely_plural(first_word):
        print 'Avoid plural form for the first word of the subject'
        print 'The first word should be a simple verb'
        return False

    if is_likely_present_continuous(first_word):
        print 'Avoid present continuous for the first word of the subject'
        print 'The first word should be a simple verb'
        return False

    if is_likely_past_tense(first_word):
        print 'Avoid past tense for the first word of the subject'
        print 'The first word should be a simple verb'
        return False

    if len(subject) > 70:
        print 'The subject should not exceed 70 chars'
        return False

    if subject[-1] == '.':
        print 'Do not end the subject with a period'
        return False

    if '. ' in subject:
        print 'Do not write multiple sentences in the subject'
        return False

    if '\n' in subject:
        print 'The subject should fit on a single line'
        print 'If there is a body, put 1 blank line between ' \
              'the subject and the body'
        return False

    return True


def is_likely_plural(word):
    w = word.lower()
    return len(w) > 3 and (w[-2:] == 'es' or (w[-1] == 's' and w[-2] != 's'))


def is_likely_present_continuous(word):
    return len(word) > 3 and word[-3:].lower() == 'ing'


def is_likely_past_tense(word):
    return len(word) > 2 and word[-2:].lower() == 'ed'


def has_valid_body(body):
    if not body:
        return True

    # TODO: Implement this
    return True

main()
